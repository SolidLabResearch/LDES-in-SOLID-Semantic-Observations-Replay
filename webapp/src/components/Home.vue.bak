<script>
import axios from 'axios';
import ChildComponent from "./childComponent.vue";
import {ref} from "vue"
// give each file a unique id
let id = 0


export default {
  components: {
    ChildComponent
  },
  data() {
    return {
      titleClass: 'title',
      message: '[SolidLab] This is the replay front-end for the Challange 16 demo',
      //submessage: 'This is based on the Vue.js tutorial from https://vuejs.org/tutorial/',
	  submessage: '',
      count: 0,
	  path: '',
	  datasourceLoaded: false,
	  newFile: '',
	  files: [ { id: id++, text: 'participant1.ttl', done: false }, { id: id++, text: 'participant2.ttl', done: true }, { id: id++, text: 'participant3.ttl', done: false }],
	  data: '',
	  dataResult: '',
	  quadCount: 0,
	  store: ''
    }
  },
  watch: {
    // whenever question changes, this function will run
    quadCount(oldStore, newStore) {
	  console.log("STORE CHANGED!")
    }
  },
  computed: {
    filteredFiles() {
	  console.log("QUADLIST: " + this.store.getQuads)
      return this.store.getQuads

        //? this.files.filter((f) => !f.done)
        //: this.files
    }
  },
  mounted() {
    let n3Script = document.createElement('script')
    n3Script.setAttribute('src', 'https://unpkg.com/n3/browser/n3.min.js')
    document.head.appendChild(n3Script)
  },
  setup() {
    const title = ref("");
    const changeTitle = (newTitle) => {
      console.log("fire")
      title.value = newTitle;
    };
    return { title, changeTitle };
  },
  methods: {
    loadTextFromFile(event) {
      console.log("LOADING")
	  const store = new N3.Store();
	  this.data = event.target.files[0]
  
	  let reader = new FileReader()
	  reader.readAsText(this.data)
	  
	  reader.onload = function() {
		this.dataResult = reader.result
		//console.log(this.dataResult)
		
		const parser = new N3.Parser();
		parser.parse(this.dataResult,
		  (error, quad, prefixes) => {
		  if (quad) {
			//console.log(quad);
			store.add(quad) 
			this.quadCount++;
			//console.log(this.quadCount)
		  }
		  else
			console.log("# That's all, folks!", prefixes);
			//console.log(store.countQuads());
			// Retrieve all quads
			// for (const quad of store)
			  // console.log(store.countQuads());			
			});
			
	  };	  

	  reader.onloadend = function() {
		this.store = store
	    console.log(this.store.countQuads())
		this.quadCount = store.countQuads()
		console.log("UPDATED QUAD COUNT")
		console.log("DONE DONE (" + this.quadCount + ")")
		alert("Quad Count: " + this.quadCount); 
	  };
	  
	  reader.onerror = function() {
	    console.log(event)
	  };

    },
    increment() {
      this.count++
      this.toggle()
    },
	getQuadCount() {
	  console.log("TEST");
	  console.log(this.quadCount);
	  return this.quadCount 
	},
	onInput(e) {
      this.path = e.target.value
    },
	toggle() {
	    this.datasourceLoaded = !this.datasourceLoaded
	},
	addFile() {
      this.files.push({ id: id++, text: this.newFile })
      this.newFile = ''
    },
    removeFile(file) {
      this.files = this.files.filter((f) => f !== file)
    }
  }
}
</script>

<template>
  <h1 :class="titleClass">{{message}}</h1>
  <!-- <h2>{{submessage}}</h2> -->
  
  <p>Please specify the input data file to be used for replay. This should be one of the participantID.ttl files.</p>
  <br>
  <input class="specificFile" type="file" @change="loadTextFromFile($event)">
  <br>
  <child-component @newValue="changeTitle" />
  <br>
    <ul>
    <li v-for="file in filteredFiles" :key="file.id">
      <input type="checkbox" v-model="file.done">{{ file.text }}
    </li>
  </ul>

  <!-- <p>Quad Count: <button v-on:click="getQuadCount">Refresh! count is: {{ this.quadCount }}</button></p> -->
  <br><br><br><br><br><br>
  <hr>
  <hr>
  
  <!--
  
  <form @submit.prevent="addFile">
    <input v-model="newFile">
    <button>Add File</button>    
  </form>
  
  
  <p>Specify path to the datafile to be used: <input :value="path" @input="onInput" placeholder="Filepath"><button v-on:click="increment">Load! count is: {{ count }}</button><br>You've chosen this file: {{ path }}</p>
  <p v-if="datasourceLoaded">The datasource has been loaded</p>
  <p v-else>The datasource has NOT been loaded</p>
  
  -->
</template>

<style>
.title {
  color: blue;
}
</style>